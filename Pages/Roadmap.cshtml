@page
@model Eduhunt.Pages.RoadmapModel
@{
    ViewData["Title"] = "Roadmap";
}

<div class="container my-5" style="padding-bottom: 132px">

    @if (Model.IsMentor)
    {
        <!-- Mentor View: Add and View Own Roadmap -->
        <div class="card shadow-sm">
            <div class="card-header d-flex justify-content-between align-items-center" style="background-color: #0D6EFD; color: white;">
                <h5 class="mb-0">Manage Roadmap</h5>
                @if (Model.CanAddStep)
                {
                    <button type="button" id="add-step" class="btn btn-light btn-sm" aria-label="Add Step">
                        <i class="bi bi-plus-circle"></i> Add Step
                    </button>
                }
            </div>
            <div class="card-body">
                <form method="post" enctype="multipart/form-data">
                    <div id="roadmap-steps">
                        @for (int i = 0; i < Model.Roadmaps.Count; i++)
                        {
                            <div class="card mb-3 step-card" data-index="@i">
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h5 class="card-title">Step @(i + 1)</h5>
                                        @if (Model.CanAddStep && i == Model.Roadmaps.Count - 1)
                                        {
                                            <button type="button" class="btn btn-danger btn-sm remove-step" aria-label="Delete Step">
                                                <i class="bi bi-trash"></i> Delete Step
                                            </button>
                                        }
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="Roadmaps[i].Title" class="form-label">Title <span class="text-danger">*</span></label>
                                        <input asp-for="Roadmaps[i].Title" class="form-control" required />
                                        <span asp-validation-for="Roadmaps[i].Title" class="text-danger"></span>
                                    </div>
                                    <div class="mb-3">
                                        <label asp-for="Roadmaps[i].Description" class="form-label">Description</label>
                                        <textarea asp-for="Roadmaps[i].Description" class="form-control" rows="3"></textarea>
                                        <span asp-validation-for="Roadmaps[i].Description" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                    @if (Model.CanAddStep)
                    {
                        <div class="gap-4">
                            <button type="submit" class="btn btn-success" aria-label="Save Roadmap">
                                <i class="bi bi-save"></i> Save Roadmap
                            </button>
                        </div>
                    }
                </form>
            </div>
        </div>
    }
    else
    {
        <!-- Regular User View: List of Mentors and Selected Mentor's Roadmap -->
        <div class="row">
            <div class="col-md-5 mb-4">
                <div class="card shadow-sm">
                    <div class="card-header" style="background-color: #0D6EFD; color: white;">
                        <h5 class="mb-0">List of Mentors</h5>
                    </div>
                    <div class="card-body p-2">
                        @if (Model.Mentors.Any())
                        {
                            <ul class="list-group list-group-flush">
                                @foreach (var mentor in Model.Mentors)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <span>@mentor.Email</span>
                                        <button type="button" class="btn btn-sm btn-secondary chat-button" data-mentor-email="@mentor.Email" data-sender-email="@Model.UserEmail">
                                            Chat
                                        </button>
                                        <button type="button" class="btn btn-sm btn-primary toggle-roadmap" data-mentor-id="@mentor.Id" aria-label="View Roadmap">
                                            <i class="bi bi-eye"></i> View Roadmap
                                        </button>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-center">No mentors to display.</p>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-7">
                @foreach (var mentor in Model.Mentors)
                {
                    <div id="roadmap-@mentor.Id" class="roadmap-container" style="display: none;">
                        <div class="card shadow-sm mb-4">
                            <div class="card-header" style="background-color: #0D6EFD; color: white;">
                                <h5 class="mb-0">Roadmap of @mentor.Email</h5>
                            </div>
                            <div class="card-body">
                                @{
                                    var mentorRoadmap = Model.Roadmaps.Where(r => r.ApplicationUserId == mentor.Id).ToList();
                                }
                                @if (mentorRoadmap.Any())
                                {
                                    @foreach (var step in mentorRoadmap)
                                    {
                                        <div class="card mb-3">
                                            <div class="card-body">
                                                <h5 class="card-title">@step.Title</h5>
                                                <p class="card-text"><strong>Description:</strong> @step.Description</p>
                                            </div>
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p class="text-center">This mentor has no roadmap to display.</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {

    <partial name="_ValidationScriptsPartial" />

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-app.js";
        import { getDatabase, ref, push } from "https://www.gstatic.com/firebasejs/10.14.1/firebase-database.js";

        document.querySelectorAll('.chat-button').forEach(button => {
            button.addEventListener('click', function () {
                const mentorEmail = this.getAttribute('data-mentor-email');
                const senderEmail = this.getAttribute('data-sender-email');

                sendInitialMessage(senderEmail, mentorEmail);
            });
        });

        function sendInitialMessage(sender, recipient) {
            sender = sender.replace("@@", "__AT__").replace(/\./g, "__DOT__");
            recipient = recipient.replace("@@", "__AT__").replace(/\./g, "__DOT__");

            const firebaseConfig = {
                apiKey: "AIzaSyDXaRAI4qQeCpX5K78-aDTAZVX0nUeHNwc",
                authDomain: "test-6c526.firebaseapp.com",
                databaseURL: "https://test-6c526-default-rtdb.asia-southeast1.firebasedatabase.app",
                projectId: "test-6c526",
                storageBucket: "test-6c526.appspot.com",
                messagingSenderId: "647478675126",
                appId: "1:647478675126:web:811f4d5669c1d72e4e4817",
                measurementId: "G-H6GSLEHGKK"
            };

            // Initialize Firebase App and Database
            const app = initializeApp(firebaseConfig);
            const database = getDatabase(app);

            const defaultMessage = "Hi Mentor, I want to connect.";
            const timestamp = new Date().toLocaleString();

            const senderRef = ref(database, `messages/${sender}/${recipient}`);
            const recipientRef = ref(database, `messages/${recipient}/${sender}`);

            const messageData = {
                text: defaultMessage,
                sender: sender,
                timestamp: timestamp
            };

            push(senderRef, messageData).catch(error => {
                console.error("Error sending message to sender thread:", error);
            });

            push(recipientRef, messageData).catch(error => {
                console.error("Error sending message to recipient thread:", error);
            });

            alert("Message sent to mentor!");
        }

        @if (Model.IsMentor && Model.CanAddStep)
        {
            <text>
                let stepIndex = @Model.Roadmaps.Count;

                document.getElementById('add-step').addEventListener('click', function () {
                    const roadmapSteps = document.getElementById('roadmap-steps');

                    const stepDiv = document.createElement('div');
                    stepDiv.classList.add('card', 'mb-3', 'step-card');
                    stepDiv.setAttribute('data-index', stepIndex);

                    stepDiv.innerHTML = `
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title">Step ${stepIndex + 1}</h5>
                                <button type="button" class="btn btn-danger btn-sm remove-step" aria-label="Delete Step">
                                    <i class="bi bi-trash"></i> Delete Step
                                </button>
                            </div>
                            <div class="mb-3">
                                <label for="Roadmaps_${stepIndex}__Title" class="form-label">Title <span class="text-danger">*</span></label>
                                <input type="text" name="Roadmaps[${stepIndex}].Title" class="form-control" id="Roadmaps_${stepIndex}__Title" required />
                            </div>
                            <div class="mb-3">
                                <label for="Roadmaps_${stepIndex}__Description" class="form-label">Description</label>
                                <textarea name="Roadmaps[${stepIndex}].Description" class="form-control" id="Roadmaps_${stepIndex}__Description" rows="3"></textarea>
                            </div>
                        </div>
                    `;
                    roadmapSteps.appendChild(stepDiv);
                    stepIndex++;
                    updateStepNumbers();
                });

                document.getElementById('roadmap-steps').addEventListener('click', function (e) {
                    if (e.target.closest('button.remove-step')) {
                        e.target.closest('.step-card').remove();
                        updateStepNumbers();
                    }
                });

                function updateStepNumbers() {
                    const stepCards = document.querySelectorAll('.step-card');
                    stepCards.forEach((card, index) => {
                        card.setAttribute('data-index', index);
                        card.querySelector('.card-title').textContent = `Step ${index + 1}`;

                        const titleInput = card.querySelector('input[name^="Roadmaps["]');
                        const descriptionInput = card.querySelector('textarea[name^="Roadmaps["]');

                        if (titleInput) {
                            titleInput.name = `Roadmaps[${index}].Title`;
                            titleInput.id = `Roadmaps_${index}__Title`;
                        }

                        if (descriptionInput) {
                            descriptionInput.name = `Roadmaps[${index}].Description`;
                            descriptionInput.id = `Roadmaps_${index}__Description`;
                        }
                    });
                    stepIndex = stepCards.length;
                }

                updateStepNumbers();
            </text>
        }
        else
        {
            <text>
                document.querySelectorAll('.toggle-roadmap').forEach(button => {
                    button.addEventListener('click', function () {
                        const mentorId = this.getAttribute('data-mentor-id');
                        const roadmapContainer = document.getElementById(`roadmap-${mentorId}`);

                        if (roadmapContainer.style.display === 'none' || roadmapContainer.style.display === '') {
                            document.querySelectorAll('.roadmap-container').forEach(container => {
                                container.style.display = 'none';
                            });

                            document.querySelectorAll('.toggle-roadmap').forEach(btn => {
                                btn.innerHTML = '<i class="bi bi-eye"></i> View Roadmap';
                            });

                            roadmapContainer.style.display = 'block';
                            this.innerHTML = '<i class="bi bi-eye-slash"></i> Hide Roadmap';
                        } else {
                            roadmapContainer.style.display = 'none';
                            this.innerHTML = '<i class="bi bi-eye"></i> View Roadmap';
                        }
                    });
                });
            </text>
        }
    </script>
}

}
